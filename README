yes, I am insane

Tired of waiting many miliseconds for linux_logo to run?
Tired of wasting 35k of disk space?
Upset that to run linux_logo you need huge GLIBC?

Well your worries are over!

With "ll"  [even the name was shortened to save space!] you get all of the
benefits of linux_logo in a smaller, faster package!

"ll" is written entirely in native Linux assembly language!


Some Statistics
---------------

     *NOTE*  not all architectures implement the same feature-set
       (IE, not all have MHz in /proc/cpuinfo) so this is only
       a rough comparison.


     Processor        lzss executable     old RLE executable
     ---------        ---------------     ------------------

     ia64		                      5736 bytes
     alpha		                      4264 bytes
     SPARC		                      3708 bytes	

     s390	        1692 bytes            2844 bytes
     mips               1500 bytes     
     parisc		1432 bytes     
     PPC		1238 bytes            3228 bytes     
     x86                 965 bytes            2636 bytes

     The various implementations have varying functunality and often
     use different methods to get system info.  Still, some gross
     comparisons between the architectures can be made.

mips:   Recent binutils has made mips come in line with the
        other architectures.

parisc:	no integer divide, have to code it up... not so bad in loop form
        crazy delay slot that can be nulled out
	some ALU instructions can also null out following instructions conditionally
	compare immediate instruction only can handle 5-bit immediate	
        loads/stores must be aligned
	no AND immediate instruction
	
ia64:   ia64 is VLIW.
     
        The way the instruction set works you can have up to 3-instructions
	per "bundle" to parallelize things.  My code is not optimized and
	thus often wastes 2/3 of each "bundle".
	
	Also I have not moved it to the more compact LZSS logo method yet.

alpha:  Unfortunately ll uses a lot of byte-sized loads and stores.
     
        On the x86 the instruction is "lodsb" which is 1 byte in size.
        On the PPC the instruction is "lbzu" which is 4 bytes in size.
        On the alpha, the instruction is "ldb" which expands to
           a "lda","ldq_u","extbl","sll","sra" sequence, plus
	   an add instruction that x86 and ppc do automatically.
	   Thus, taking 24 bytes.

sparc:  I cheat a bit on sparc and avoid all of the overhead
        of register windows.
	

s390:   This is the most CISC architecture I've ever seen.  If only it had
	   a "load byte" opcode it would definitely beat out x86.  I am sure
	   it can be optimized even smaller than x86 by a s390 expert.
	   Being able to do "strcat" in 2 or 3 op-codes and strlen in not
	   more than 5 is a big plus.

ppc:	The PowerPC has very CISC-like opcodes as well.
        Despite being load-store with 3 operand instructions, you almost
	wouldn't know it was considered RISC.  I also think I could
	optimize the code a bit more and challence x86.

x86:    The x86 code is currently the smallest, mainly because I had a
        running contest for a while with Stephan Walter until
	we got it below 1k.    It does help that there are a lot of
	useful 1-byte instructions in the x86 command set, which give
	it an instant advantage over all of the RISC chips.
	
	The only thing that holds x86 back a bit is the register pressure.
	I should do an x86_64 version and see what the tradeoffs are.

Features:
--------
    + Runs in 4 miliseconds, more than twice as fast as the 10 linux_logo 
      takes on a K6-2+ 450!
    + Takes up only 977 bytes when stripped!
  
     Amaze your enemies!  Impress your friends!


BUGS:
-----
	No pretty-printing: This means that your computer is reported just
                            as /proc/cpuinfo reports, ugly model-name, off 
			    MHz, and all.

	Possibly kernel-dependent:  I only tested this on 2.4 and 2.6 kernels.
                            The sysinfo() syscall changed between 2.2 and 2.4

Custom Logo:
------------

	Point the "ANSI_TO_USE" variable in the Makefile to any text
	or ansi file you want when building.


HOW TO HELP:
------------
	If you have a Linux box running on an unsupported architecture,
	offer the author a shell-account so he can create a version
	for your type of machine!

Useful Resources:
-----------------
        http://www.linuxassembly.org
	http://www.deater.net/weave/vmwprod/asm
	http://www.deater.net/weave/vmwprod/linux_logo

Special Thanks:
---------------
	to my lovely wife

AUTHOR:
-------
        Vince Weaver <vince _at_ deater.net>  http://www.deater.net/weave
